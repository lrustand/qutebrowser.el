#+TITLE: qutebrowser.el
#+OPTIONS: toc:nil
#+export_select_tags: export
#+export_exclude_tags: exclude noexport
#+tags: export noexport

qutebrowser.el is an Emacs package that provides tight two-way
integration between Qutebrowser and EXWM. It provides features such as
integration with the Emacs bookmark system, buffer and history sources
for Consult, a URL launcher that can be used in place of the default
Qutebrowser one, a minor mode for Qutebrowser EXWM buffers, theme
synchronization between Emacs and Qutebrowser, and facilities for
sending commands and code to Qutebrowser using various backends.

* Contents
:PROPERTIES:
:TOC:      :include siblings :depth 2 :force (nothing) :ignore (this) :local (nothing)
:END:
:CONTENTS:
- [[#features][Features]]
  - [[#planned-features][Planned features]]
  - [[#ideas][Ideas]]
- [[#installation][Installation]]
  - [[#manual-installation][Manual Installation]]
  - [[#installation-with-quelpa][Installation with quelpa]]
- [[#prerequisites][Prerequisites]]
- [[#configuration][Configuration]]
  - [[#recommended-qutebrowser-settings][Recommended Qutebrowser settings]]
  - [[#required-emacs-configurations][Required Emacs configurations]]
- [[#usage][Usage]]
  - [[#qutebrowser-exwm-mode][Qutebrowser EXWM mode]]
  - [[#bookmarks][Bookmarks]]
  - [[#url-launcher][URL launcher]]
  - [[#qutebrowser-command-execution][Qutebrowser command execution]]
  - [[#theme-synchronization][Theme synchronization]]
  - [[#password-store][Password store]]
- [[#recommended-third-party-packages][Recommended third-party packages]]
:END:


* Features

The currently implemented features are:

- Remote code/command execution
- Two-way RPC
- Hooks for various Qutebrowser events
- Theme synchronization
- Bookmarks
- URL launcher with browsing history completion
- Password-store autofill
- REPL for interactively running Python code inside the Qutebrowser process

** Planned features

I also plan to implement the following features sometime in the near(ish) future:

- Combined EXWM modeline and Qutebrowser statusbar. (Under development)
- Setting keybinds for Qutebrowser commands in an Emacs keymap

** Ideas

Some ideas for possible future features. These are not currently
planned for implementation, but I keep them around for future
use.

- Integrated searching, synchronizing the searches of search engines,
  Emacs isearch and similar, and Qutebrowser text searches.
- Open devtools in an EXWM split.
- Edit text fields in an EXWM split.
- URL interceptors for dispatching Emacs commands when URLs matching a
  pattern is loaded.
- DWIM on currently open URL. (open youtube in mpv, open code files in Emacs, etc.)
- A (limited) set of Qutebrowser commands replicated as Emacs
  commands. This would be a simple convenience wrapper around
  =qutebrowser-send-commands=.
- Option to manage Qutebrowser configurations from Emacs.
- Integrate with =auto-dim-other-buffers-mode= to dim inactive
  Qutebrowser buffers.
- Some kind of Greasemonkey script handling. Unsure what type of
  features make sense, and how best to handle things.

* Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
** Manual Installation
:PROPERTIES:
:CUSTOM_ID: manual-installation
:END:

To install manually, follow these steps:

1. Clone the repository:

#+begin_src bash
  git clone https://github.com/lrustand/qutebrowser.el ~/.emacs.d/site-lisp/qutebrowser.el
#+end_src

2. Add the following to your Emacs configuration:

#+begin_src elisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp/qutebrowser.el")
  (require 'qutebrowser)
#+end_src

** Installation with quelpa
:PROPERTIES:
:CUSTOM_ID: installation-with-quelpa
:END:

To install using [[https://github.com/quelpa/quelpa][quelpa]] with use-package, add the following to your
Emacs configuration:

#+begin_src elisp
  (use-package qutebrowser
    :quelpa (qutebrowser :fetcher github
                         :repo "lrustand/qutebrowser.el"
                         :files (:defaults "*.py")))
#+end_src

* Prerequisites
:PROPERTIES:
:CUSTOM_ID: prerequisites
:END:

- *Qutebrowser:* This probably goes without saying.
- *EXWM:* Most features are targetting EXWM, and the main aim of the
  package is to improve usage of Qutebrowser inside EXWM. It should
  still be possible to get some use out of the package even if you
  aren't an EXWM user though.
- *Consult:* The URL launcher builds upon Consult and is implemented as
  Consult buffer sources. The buffer sources can also be added to your
  =consult-buffer-sources= to make them available through the
  =consult-buffer= command.

* Configuration
:PROPERTIES:
:CUSTOM_ID: configuration
:END:

** Recommended Qutebrowser settings
:PROPERTIES:
:CUSTOM_ID: required-qutebrowser-configurations
:END:

To enable /flat web browsing/ and to make the Consult buffer sources
work, Qutebrowser has to be configured to open tabs as windows. It is
also recommended to hide the tab bar, since there will be no tabs.

#+begin_src python
c.tabs.tabs_are_windows = True
c.tabs.show = 'multiple'
#+end_src

If you're having trouble with existing Qutebrowser windows being
raised and given focus when using one of the =qutebrowser-launcher=
commands to open a new window, you might need to add the following
line to your =config.py=:

#+begin_src python
# Avoid browser being focused when sending commands
c.new_instance_open_target = 'tab-silent'
#+end_src

Despite what the name of the setting might suggest, it does not seem
to affect where new windows/tabs are opened, it only keeps from
raising the last used window when sending commands using the
commandline backend. It might not be necessary to set this option when
using the IPC backend.

If you are using the theme synchronization, add this line to your
=config.py= to load the exported theme on Qutebrowser startup:

#+begin_src python
config.source("emacs_theme.py")
#+end_src

** Required Emacs configurations
:PROPERTIES:
:CUSTOM_ID: required-emacs-configurations
:END:

To be able to use the URL launcher as a userscript, you need to start
an Emacs server. Add this to your =init.el=:

#+begin_src elisp
  (server-start)
#+end_src

* Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:

** Qutebrowser EXWM mode
:PROPERTIES:
:CUSTOM_ID: qutebrowser-exwm-mode
:END:

=qutebrowser-exwm-mode= can be enabled on a per-buffer basis, or you can
enable =global-qutebrowser-exwm-mode= to automatically enable it in
every Qutebrowser buffer.

Currently the mode only activates the bookmark integration, but it can
also potentially be used to set keybindings for Qutebrowser buffers.

** Bookmarks
:PROPERTIES:
:CUSTOM_ID: bookmarks
:END:

When =qutebrowser-exwm-mode= is active in any buffer, the bookmarking
system is automatically set up and can be used just like any other
bookmarks through =bookmark-set= and =bookmark-jump= (=C-x r m= and =C-x r b=
by default).

** URL launcher
:PROPERTIES:
:CUSTOM_ID: url-launcher
:END:

The URL launcher can be used instead of the default by binding it
inside Qutebrowser:

#+begin_src python
config.bind("o", "emacs '(qutebrowser-launcher)'")
config.bind("O", "emacs '(qutebrowser-launcher-tab)'")
config.bind("wo", "emacs '(qutebrowser-launcher-window)'")
config.bind("W", "emacs '(qutebrowser-launcher-private)'")
config.bind("go", "emacs '(qutebrowser-launcher \"{url:pretty}\")'")
config.bind("gO", "emacs '(qutebrowser-launcher-tab \"{url:pretty}\")'")
#+end_src

It can also be used directly from inside Emacs by running one of the
interactive commands =qutebrowser-launcher=, =qutebrowswer-launcher-tab=,
=qutebrowser-launcher-window=, or =qutebrowser-launcher-private=.

** Qutebrowser command execution
:PROPERTIES:
:CUSTOM_ID: qutebrowser-ipc
:END:

Qutebrowser.el provides the following ways to execute commands and/or
code in Qutebrowser:

- *qutebrowser-send-commands:* Send Qutebrowser commands such as =:open=,
  =:back=, etc.
- *qutebrowser-execute-js:* Execute JavaScript code in Qutebrowser. The
  code is executed in the same environment as the web page code,
  making it possible to interact with the web page and any
  Greasemonkey script that is active there.
- *qutebrowser-execute-python:* Execute Python code as if it was written
  in =config.py=. Uses =:config-source= to source a temporary file.
- *qutebrowser-config-source:* Sources the given file as a Qutebrowser
  config file, or reloads =config.py= if none is given.

** Theme synchronization
:PROPERTIES:
:CUSTOM_ID: theme-synchronization
:END:

Enable the theme synchronization by enabling the global minor mode
=qutebrowser-theme-export-mode=. This generates a color scheme for
Qutebrowser based on the current Emacs theme any time the Emacs theme
changes.

** Password store

Username and password autofill can be accomplished by using the
=qutebrowser-pass= command, which can be bound like this:

#+begin_src python
config.bind(',p', "emacs '(qutebrowser-pass \"{url}\")'")
config.bind(',P', "emacs '(qutebrowser-pass-password-only \"{url}\")'")
config.bind(',o', "emacs '(qutebrowser-pass-otp \"{url}\")'")
#+end_src

Per default =username= is expected to be the last item of a pass entry, e.g.
=site.com/username=. In case you store =username= encrypted along the password,
configure the username extractor accordingly:

#+begin_src elisp
(setq qutebrowser-pass--username
      (apply-partially #'auth-source-pass-get "login"))
#+end_src

* Recommended third-party packages

- vertico-posframe-mode
- engine-mode


* Footer                                                           :noexport:
# Local Variables:
# before-save-hook: org-make-toc
# End:
